#!/bin/bash

#FUNCTIONS

#Checks To See If The User Already Exists, or Creates The New User

passwd_check()
{
   if [ "$1" != "$2" ]
      then
        echo "Passwords Do Not Match...."
   else
        break
   fi
}

check_user()
{
if [ $(cat /etc/passwd | awk -F: '{ print $1 }' | grep -Fx "$sudo_user") ]
  then
   echo "The user $sudo_user already exists. The domain will be installed in this user's home directory. It will also use the same php-fpm pool as any other domains running as this user."
   echo ""
fi
}

check_vars()
{
  var_check=0
  if [ -z "$hostname" -o -z "$sudo_user" ]
    then
    echo "Value of variables cannot be empty. You must choose a domain name and user."
    echo ""
    var_check=1
  fi
  if [ ! $(cat /etc/passwd | awk -F: '{ print $1 }' | grep -Fx "$sudo_user") ]
    then
    if [ -z "$sudo_user_passwd" ]
       then
       echo "Value of variables cannot be empty. You must choose a password for your user."
       echo ""
       var_check=1
    fi
  fi
 if [ $wp_choice == "Y" ] 
     then
     if [ -z "$wptitle" -o -z "$wpuser" -o -z "$wppass" -o -z "$wpemail" ]
        then
        echo "Value of variables cannot be empty. You must enter all the parameters for your WP Install."
       echo ""
       var_check=1
     fi
  fi
  
}

config_db()
{
  echo -n "Setting up WordPress database... "
  WP_DB=`echo $(</dev/urandom tr -dc A-Za-z0-9 | head -c 15)`
  WP_USER=`echo $(</dev/urandom tr -dc A-Za-z0-9 | head -c 15)`
  WP_USER_PASS=`echo $(</dev/urandom tr -dc A-Za-z0-9 | head -c 15)`
  mysql -e "CREATE DATABASE $WP_DB"
  mysql -e "GRANT ALL PRIVILEGES ON $WP_DB.* to $WP_USER@localhost IDENTIFIED BY '$WP_USER_PASS'"
  mysql -e "FLUSH PRIVILEGES"
  echo "done."
}

configure_wp()
{
  echo -n "Setting up WordPress... "
  DB_PREFIX=`echo $(</dev/urandom tr -dc A-Za-z0-9 | head -c 7)`
  mkdir -p /home/$sudo_user/$hostname/public/
  touch /home/$sudo_user/$hostname/pagespeed.conf
  #echo 'pagespeed DisableFilters rewrite_javascript;' > /home/$sudo_user/$hostname/pagespeed.conf
  wget -q -o ~/install.log -O /home/$sudo_user/$hostname/public/latest.zip http://wordpress.org/latest.zip
  unzip /home/$sudo_user/$hostname/public/latest.zip -d /home/$sudo_user/$hostname/public/ >> ~/install.log
  mv /home/$sudo_user/$hostname/public/wordpress/* /home/$sudo_user/$hostname/public/
  rm -rf /home/$sudo_user/$hostname/public/wordpress
  rm -rf /home/$sudo_user/$hostname/public/latest.zip
  perl -p -i -e "s|database_name_here|$WP_DB|;" /home/$sudo_user/$hostname/public/wp-config-sample.php
  perl -p -i -e "s|username_here|$WP_USER|;" /home/$sudo_user/$hostname/public/wp-config-sample.php
  perl -p -i -e "s|password_here|$WP_USER_PASS|;" /home/$sudo_user/$hostname/public/wp-config-sample.php
  perl -p -i -e "s|\$table_prefix  = 'wp_';|\$table_prefix  = '$DB_PREFIX';|;" /home/$sudo_user/$hostname/public/wp-config-sample.php
  mv /home/$sudo_user/$hostname/public/wp-config-sample.php /home/$sudo_user/$hostname/public/wp-config.php
  wget -O /tmp/wp.keys https://api.wordpress.org/secret-key/1.1/salt/ > /dev/null 2>&1
  sed -i '/#@-/r /tmp/wp.keys' /home/$sudo_user/$hostname/public/wp-config.php
  sed -i "/#@+/,/#@-/d" /home/$sudo_user/$hostname/public/wp-config.php
  rm -rf /home/$sudo_user/$hostname/public/license.txt && rm -rf /home/$sudo_user/$hostname/public/readme.html
  rm -rf /tmp/wp.keys
  #curl -d "weblog_title=$wptitle&user_name=$wpuser&admin_password=$wppass&admin_password2=$wppass&admin_email=$wpemail" http://$hostname/wp-admin/install.php?step=2 >/dev/null 2>&1
  mv /home/$sudo_user/$hostname/public/wp-config.php /home/$sudo_user/$hostname/wp-config.php
  sed -i 's/'"$(printf '\015')"'$//g' /home/$sudo_user/$hostname/wp-config.php
  chmod 400 /home/$sudo_user/$hostname/wp-config.php
    rm -rf /home/$sudo_user/$hostname/public/wp-admin/install.php
  cp /var/lib/venison/install.php /home/$sudo_user/$hostname/public/wp-admin/
  sed -i "s/v_title/$wptitle/g" /home/$sudo_user/$hostname/public/wp-admin/install.php
  sed -i "s/v_user/$wpuser/g" /home/$sudo_user/$hostname/public/wp-admin/install.php
  sed -i "s/v_pass/$wppass/g" /home/$sudo_user/$hostname/public/wp-admin/install.php
  sed -i "s/v_email/$wpemail/g" /home/$sudo_user/$hostname/public/wp-admin/install.php
  chown -R apache:apache /home/$sudo_user/$hostname
  #Run The Install
  php /home/$sudo_user/$hostname/public/wp-admin/install.php > /dev/null 2>&1
  rm -f /home/$sudo_user/$hostname/public/wp-admin/install.php
  #Adjust The Database. Switch Permalinks, and install/enable Nginx Helper plugin
  cp /var/lib/venison/htaccess /home/$sudo_user/$hostname/public/.htaccess
  wget -O /tmp/nginx-helper.1.7.2.zip http://downloads.wordpress.org/plugin/nginx-helper.1.7.2.zip > /dev/null 2>&1
  unzip /tmp/nginx-helper.1.7.2.zip -d /home/$sudo_user/$hostname/public/wp-content/plugins/ > /dev/null 2>&1
  rm -f /tmp/nginx-helper.1.7.2.zip
  chown -R $sudo_user:apache /home/$sudo_user/$hostname
  table="$DB_PREFIX"
  table+="options"
  mysql $WP_DB -e "UPDATE $table SET option_value='http://$hostname' WHERE option_name='siteurl'"
  mysql $WP_DB -e "UPDATE $table SET option_value='http://$hostname' WHERE option_name='home'"
  mysql $WP_DB -e "UPDATE $table SET option_value='/%postname%/' WHERE option_name='permalink_structure'"
  mysql $WP_DB -e "UPDATE $table SET option_value='a:1:{i:0;s:29:\"nginx-helper/nginx-helper.php\";}' WHERE option_name='active_plugins'"
  mysql $WP_DB -e "UPDATE $table SET option_value='a:17:{s:9:\"log_level\";s:4:\"INFO\";s:12:\"log_filesize\";i:5;s:12:\"enable_purge\";i:1;s:10:\"enable_map\";i:0;s:10:\"enable_log\";i:0;s:12:\"enable_stamp\";i:1;s:21:\"purge_homepage_on_new\";i:1;s:22:\"purge_homepage_on_edit\";i:1;s:21:\"purge_homepage_on_del\";i:1;s:20:\"purge_archive_on_new\";i:1;s:21:\"purge_archive_on_edit\";i:1;s:20:\"purge_archive_on_del\";i:1;s:28:\"purge_archive_on_new_comment\";i:0;s:32:\"purge_archive_on_deleted_comment\";i:0;s:17:\"purge_page_on_mod\";i:1;s:25:\"purge_page_on_new_comment\";i:1;s:29:\"purge_page_on_deleted_comment\";i:1;}' WHERE option_name='rt_wp_nginx_helper_global_options'"
  mysql $WP_DB -e "UPDATE $table SET option_value='a:13:{s:12:\"enable_purge\";i:1;s:10:\"enable_map\";i:0;s:10:\"enable_log\";i:0;s:12:\"enable_stamp\";i:1;s:22:\"purge_homepage_on_edit\";i:1;s:21:\"purge_homepage_on_del\";i:1;s:21:\"purge_archive_on_edit\";i:1;s:20:\"purge_archive_on_del\";i:1;s:28:\"purge_archive_on_new_comment\";i:0;s:32:\"purge_archive_on_deleted_comment\";i:0;s:17:\"purge_page_on_mod\";i:1;s:25:\"purge_page_on_new_comment\";i:1;s:29:\"purge_page_on_deleted_comment\";i:1;}' WHERE option_name='rt_wp_nginx_helper_options'"
  echo "done."
}


add_domain()
{
clear
#Get Options
echo -n "Enter The Domain Name Of Your Website: "
read hostname
echo -n "Enter The Name Of The USER This Website Should Run As: "
read sudo_user
if [ ! $(cat /etc/passwd | awk -F: '{ print $1 }' | grep -Fx "$sudo_user") ]
  then
while true; do
    echo -n "Enter The Password For Your User: "
    read -s sudo_user_passwd
    echo ""
    echo -n "Confirm User Password: "
    read -s sudo_user_passwd_confirm
    echo ""
    passwd_check $sudo_user_passwd $sudo_user_passwd_confirm
    done
fi
while true
  do
  echo -n "Do You Want To Install WordPress For This Domain? (Y or N): "
  read wp_choice
  wp_choice=$(echo $wp_choice | tr 'a-z' 'A-Z')
  if [ $wp_choice == "Y" ] || [ $wp_choice == "N" ]
     then
     break
  else
     echo "Invalid Choice!"
  fi
done
if [ $wp_choice == "Y" ]
  then
echo -n "Enter The Title Of Your Website: "
read wptitle
echo -n "Enter Your WordPress Admin Username: "
read wpuser
while true; do
    echo -n "Enter Your WordPress Admin Password: "
    read -s wppass
    echo ""
    echo -n "Confirm Your WordPress Admin Password: "
    read -s wppass_confirm
    echo ""
    passwd_check $wppass $wppass_confirm
    done
echo -n "Enter Your WordPress Admin Email Address: "
read wpemail
fi
check_vars
if [ $var_check != 0 ]
   then
   echo "You need to enter the information noted above. TRY AGAIN BRO!"
   echo ""
   exit
fi

#Time To Actually Do The Deed!


#Add Nginx config
cp /var/lib/venison/mydomain.com /etc/nginx/sites-available/$hostname.conf
sed -i -r "s/mydomain.com/$hostname/g" /etc/nginx/sites-available/$hostname.conf
sed -i -r "s/sudoer/$sudo_user/g" /etc/nginx/sites-available/$hostname.conf
ln -s -v /etc/nginx/sites-available/$hostname.conf /etc/nginx/sites-enabled/$hostname.conf > /dev/null 2>&1

#Create New php-fpm pool if the user is new

if [ ! $(cat /etc/passwd | awk -F: '{ print $1 }' | grep -Fx "$sudo_user") ] 
   then
  cp /etc/php-fpm.d/www.conf.default /etc/php-fpm.d/$sudo_user.conf
  sed -i "s/\[www\]/\[$sudo_user\]/g" /etc/php-fpm.d/$sudo_user.conf
  sed -i "s%listen = 127.0.0.1:9000%listen = /var/run/php5-fpm.$sudo_user.sock%g" /etc/php-fpm.d/$sudo_user.conf
  sed -i "s%user = apache%user = $sudo_user%g" /etc/php-fpm.d/$sudo_user.conf
  perl -p -i -e 's|;pm.status_path = /status|pm.status_path = /status|g;' /etc/php-fpm.d/$sudo_user.conf
  perl -p -i -e 's|;request_slowlog_timeout = 0|request_slowlog_timeout = 5s|g;' /etc/php-fpm.d/$sudo_user.conf
  sed -i 's/pm.max_children = 50/pm.max_children = 70/g' /etc/php-fpm.d/$sudo_user.conf
  sed -i 's/pm.start_servers = 5/pm.start_servers = 8/g' /etc/php-fpm.d/$sudo_user.conf
  sed -i 's/pm.max_spare_servers = 35/pm.max_spare_servers = 10/g' /etc/php-fpm.d/$sudo_user.conf

fi

#Add User If It Does Not Exist

if [ ! $(cat /etc/passwd | awk -F: '{ print $1 }' | grep -Fx "$sudo_user") ]
   then
   echo -n "Creating sudo user... "
    useradd -d /home/$sudo_user -s /bin/bash -m $sudo_user
    echo "$sudo_user:$sudo_user_passwd" | chpasswd
    echo "$sudo_user ALL=(ALL) ALL" >> /etc/sudoers
    { echo 'export PS1="\[\e[32;1m\]\u\[\e[0m\]\[\e[32m\]@\h\[\e[36m\]\w \[\e[33m\]\$ \[\e[0m\]"'
    } >> /home/$sudo_user/.bashrc
    chmod 710 /home/$sudo_user
fi

#Add Apache Config
cp /var/lib/venison/mydomain.com_httpd /etc/httpd/sites-available/$hostname.conf
sed -i -r "s/mydomain.com/$hostname/g" /etc/httpd/sites-available/$hostname.conf
sed -i -r "s/sudoer/$sudo_user/g" /etc/httpd/sites-available/$hostname.conf
sed -i -r "s/useremail/$wpemail/g" /etc/httpd/sites-available/$hostname.conf
ln -s -v /etc/httpd/sites-available/$hostname.conf /etc/httpd/sites-enabled/$hostname.conf > /dev/null 2>&1

#Install WP If They Want Us To
if [ "$wp_choice" == "Y" ]
   then
   echo "Installing WordPress...."
   config_db
   configure_wp
   echo "Done!"     
fi

#Create Web Directory In case WP is not installed
mkdir -p /home/$sudo_user/$hostname/public
chown -R $sudo_user:apache /home/$sudo_user

#Reboot Nginx And Apache
echo "Restarting Web Servers..."
echo ""
/etc/init.d/nginx reload
echo ""
/etc/init.d/httpd restart
echo ""
/etc/init.d/php-fpm restart
echo ""
echo "done!"


#Print out Report
  echo ""
  echo "Venison is delicious... enjoy!"
  echo ""
  if [ "$wp_choice" == "Y" ]
      then
  echo "DATABASE INFO:"
  echo ""
  echo "Database to be used: $WP_DB"
  echo "Database user: $WP_USER"
  echo "Database user password: $WP_USER_PASS"
  echo ""
  echo "WORDPRESS INFO:"
  echo ""
  echo "Site Title: $hostname"
  echo "Admin Login User: $wpuser"
  echo "Admin Password: $wppass"
  echo "Admin Email Address: $wpemail"
  fi
}

remove_domain()
{
echo "remove domain"
}


#BEGIN PROGRAM

clear
menu_choice=""
echo "Welcome To The Venison Control Script!"
while true
  do
echo ""
echo "#################################"
echo ""
echo "1) Add A Domain"
echo "2) Remove A Domain"
echo ""
echo "q) quit"
echo ""
echo "#################################"
echo ""
echo -n "Enter Your Choice: "
read menu_choice
echo ""

case $menu_choice in
 
  1) 
      add_domain
  ;;
  2)
     remove_domain
  ;;
  q)
     exit
  ;;
  *)
   echo "Enter A Valid Menu Choice"
esac
done
